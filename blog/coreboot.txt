Tags in vim for coreboot using ctags
Install ctags:
sudo apt-get install exuberant-ctags
Go to coreboot direcotry and run:
ctags -R .
This should generate huge text file (mine have 22MB) with tags, called tags.
Right now we need aproppriate line in our $HOME/.vimrc to load tags everytime
when vim find it. Add text below to your $HOME/.vimrc file:
"ctags
set tags=./tags
Run vim in coreboot dirctory. Type:
:e src/cpu/x86/16bit/reset16.inc
Put cursor over protected_start and press Ctrl-]. If everything goes good you should jump to
build/mainboard/emulation/qemu-x86/bootblock.s line 537.

Debug
Run qemu in debug mode (-s -S) with additional logging (-d in_asm,cpu):
qemu -bios coreboot/build/coreboot.rom -s -S -d in_asm,cpu -nographic
In second terminal:
tail -f /tmp/qemu.log

I. Flow 1
	0. gdb> file path/to/coreboot/build/coreboot_ram
	1. Start from reset vector in src/cpu/x86/16bit/reset16.inc
		- understand what is going on in this file
	2. Jump to build/mainboard/emulation/qemu-x86/bootblock.s where _start label
	for qemu was defineds
	3. After all instractions in real mode
II. Flow 2
	0. gdb> file path/to/coreboot/build/bootblock.elf
	0a.add-symbol-file workspace/coreboot/coreboot/build/coreboot_ram 0x00100000 -s .data 0x00116e50 -s .bss 0x00117380
		- adres comes from objdump -h on coreboot_ram
	1. in another window vim /tmp/qemu.log
	2. run nex instruction in gdb (ni)
	3. we run from 0xfffffff0 - this is reset vector (as it state in memory map files grep fffffff0 build/*.map)
	bootblock.map:fffffff0 A _ROMTOP
	bootblock.map:fffffff0 R reset_vector
	4. flow:
		- reset_vector
		- _start
		- __protected_start
		- L1007
		- loop L1004 -> L1006
		- L1008
		- L1009
		- walkcbfs_asm
		- walker
		- tryharder
		- walker

 
